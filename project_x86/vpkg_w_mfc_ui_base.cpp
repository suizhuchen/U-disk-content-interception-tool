
// Generated by Volcano Development Platform - http://www.voldp.com

#include "stdafx.h"
#include "vol_user_app.h"

namespace rg_hsh_MFCjm_jb
{

CVolWinControl::CVolWinControl ()
{
}

BOOL CVolWinControl::_IsSelfEqual (const CVolWinControl& objCompare) const
{
    if (rg_n7888 != objCompare.rg_n7888)  return FALSE;
    return TRUE;
}

void CVolWinControl::_CopySelfFrom (const CVolWinControl& objCopyFrom)
{
    rg_n7888 = objCopyFrom.rg_n7888;
}

void CVolWinControl::ra_CVolWinControl_n7804 (VOID_FUNC fnReceiver, CVolObjectPointer* pEventReceiver, INT nTagNumber)
{
    rw_20.SetReceiver (fnReceiver, pEventReceiver, nTagNumber);
    _OnAfterEventAttached (fnReceiver != NULL);
}

INT CVolWinControl::rg_n7804 (INT rg_n7805, INT rg_n7806, INT rg_n7807)
{
    INT nTagNumber;
    VOID_FUNC pfnReceiver;
    CVolObject* pobjEventReceiver;
    if (rw_20.GetReceiver (&pfnReceiver, &pobjEventReceiver, &nTagNumber))
        return ((INT (*) (CVolObject* pobjEventReceiver, CVolObject* pobjEventSource, INT nTagNumber, INT rg_n7805, INT rg_n7806, INT rg_n7807))pfnReceiver) (pobjEventReceiver, this, nTagNumber, rg_n7805, rg_n7806, rg_n7807);
    else
        return 0;
}

void CVolWinControl::ra_CVolWinControl_n7808 (VOID_FUNC fnReceiver, CVolObjectPointer* pEventReceiver, INT nTagNumber)
{
    rw_21.SetReceiver (fnReceiver, pEventReceiver, nTagNumber);
    _OnAfterEventAttached (fnReceiver != NULL);
}

INT CVolWinControl::rg_n7808 (INT rg_n7809, INT rg_n7810, INT rg_n7811)
{
    INT nTagNumber;
    VOID_FUNC pfnReceiver;
    CVolObject* pobjEventReceiver;
    if (rw_21.GetReceiver (&pfnReceiver, &pobjEventReceiver, &nTagNumber))
        return ((INT (*) (CVolObject* pobjEventReceiver, CVolObject* pobjEventSource, INT nTagNumber, INT rg_n7809, INT rg_n7810, INT rg_n7811))pfnReceiver) (pobjEventReceiver, this, nTagNumber, rg_n7809, rg_n7810, rg_n7811);
    else
        return 0;
}

void CVolWinControl::ra_CVolWinControl_n7812 (VOID_FUNC fnReceiver, CVolObjectPointer* pEventReceiver, INT nTagNumber)
{
    rw_22.SetReceiver (fnReceiver, pEventReceiver, nTagNumber);
    _OnAfterEventAttached (fnReceiver != NULL);
}

INT CVolWinControl::rg_n7812 (INT rg_n7813, INT rg_n7814, INT rg_n7815)
{
    INT nTagNumber;
    VOID_FUNC pfnReceiver;
    CVolObject* pobjEventReceiver;
    if (rw_22.GetReceiver (&pfnReceiver, &pobjEventReceiver, &nTagNumber))
        return ((INT (*) (CVolObject* pobjEventReceiver, CVolObject* pobjEventSource, INT nTagNumber, INT rg_n7813, INT rg_n7814, INT rg_n7815))pfnReceiver) (pobjEventReceiver, this, nTagNumber, rg_n7813, rg_n7814, rg_n7815);
    else
        return 0;
}

void CVolWinControl::ra_CVolWinControl_n7816 (VOID_FUNC fnReceiver, CVolObjectPointer* pEventReceiver, INT nTagNumber)
{
    rw_23.SetReceiver (fnReceiver, pEventReceiver, nTagNumber);
    _OnAfterEventAttached (fnReceiver != NULL);
}

INT CVolWinControl::rg_n7816 (INT rg_n7817, INT rg_n7818, INT rg_n7819)
{
    INT nTagNumber;
    VOID_FUNC pfnReceiver;
    CVolObject* pobjEventReceiver;
    if (rw_23.GetReceiver (&pfnReceiver, &pobjEventReceiver, &nTagNumber))
        return ((INT (*) (CVolObject* pobjEventReceiver, CVolObject* pobjEventSource, INT nTagNumber, INT rg_n7817, INT rg_n7818, INT rg_n7819))pfnReceiver) (pobjEventReceiver, this, nTagNumber, rg_n7817, rg_n7818, rg_n7819);
    else
        return 0;
}

void CVolWinControl::ra_CVolWinControl_n7820 (VOID_FUNC fnReceiver, CVolObjectPointer* pEventReceiver, INT nTagNumber)
{
    rw_24.SetReceiver (fnReceiver, pEventReceiver, nTagNumber);
    _OnAfterEventAttached (fnReceiver != NULL);
}

INT CVolWinControl::rg_n7820 (INT rg_n7821, INT rg_n7822, INT rg_n7823)
{
    INT nTagNumber;
    VOID_FUNC pfnReceiver;
    CVolObject* pobjEventReceiver;
    if (rw_24.GetReceiver (&pfnReceiver, &pobjEventReceiver, &nTagNumber))
        return ((INT (*) (CVolObject* pobjEventReceiver, CVolObject* pobjEventSource, INT nTagNumber, INT rg_n7821, INT rg_n7822, INT rg_n7823))pfnReceiver) (pobjEventReceiver, this, nTagNumber, rg_n7821, rg_n7822, rg_n7823);
    else
        return 0;
}

void CVolWinControl::ra_CVolWinControl_n7824 (VOID_FUNC fnReceiver, CVolObjectPointer* pEventReceiver, INT nTagNumber)
{
    rw_25.SetReceiver (fnReceiver, pEventReceiver, nTagNumber);
    _OnAfterEventAttached (fnReceiver != NULL);
}

INT CVolWinControl::rg_n7824 (INT rg_n7825, INT rg_n7826, INT rg_n7827)
{
    INT nTagNumber;
    VOID_FUNC pfnReceiver;
    CVolObject* pobjEventReceiver;
    if (rw_25.GetReceiver (&pfnReceiver, &pobjEventReceiver, &nTagNumber))
        return ((INT (*) (CVolObject* pobjEventReceiver, CVolObject* pobjEventSource, INT nTagNumber, INT rg_n7825, INT rg_n7826, INT rg_n7827))pfnReceiver) (pobjEventReceiver, this, nTagNumber, rg_n7825, rg_n7826, rg_n7827);
    else
        return 0;
}

void CVolWinControl::ra_CVolWinControl_n7828 (VOID_FUNC fnReceiver, CVolObjectPointer* pEventReceiver, INT nTagNumber)
{
    rw_26.SetReceiver (fnReceiver, pEventReceiver, nTagNumber);
    _OnAfterEventAttached (fnReceiver != NULL);
}

INT CVolWinControl::rg_n7828 (INT rg_n7829, INT rg_n7830)
{
    INT nTagNumber;
    VOID_FUNC pfnReceiver;
    CVolObject* pobjEventReceiver;
    if (rw_26.GetReceiver (&pfnReceiver, &pobjEventReceiver, &nTagNumber))
        return ((INT (*) (CVolObject* pobjEventReceiver, CVolObject* pobjEventSource, INT nTagNumber, INT rg_n7829, INT rg_n7830))pfnReceiver) (pobjEventReceiver, this, nTagNumber, rg_n7829, rg_n7830);
    else
        return 0;
}

void CVolWinControl::ra_CVolWinControl_n7831 (VOID_FUNC fnReceiver, CVolObjectPointer* pEventReceiver, INT nTagNumber)
{
    rw_27.SetReceiver (fnReceiver, pEventReceiver, nTagNumber);
    _OnAfterEventAttached (fnReceiver != NULL);
}

INT CVolWinControl::rg_n7831 (INT rg_n7832, INT rg_n7833)
{
    INT nTagNumber;
    VOID_FUNC pfnReceiver;
    CVolObject* pobjEventReceiver;
    if (rw_27.GetReceiver (&pfnReceiver, &pobjEventReceiver, &nTagNumber))
        return ((INT (*) (CVolObject* pobjEventReceiver, CVolObject* pobjEventSource, INT nTagNumber, INT rg_n7832, INT rg_n7833))pfnReceiver) (pobjEventReceiver, this, nTagNumber, rg_n7832, rg_n7833);
    else
        return 0;
}

void CVolWinControl::ra_CVolWinControl_n7834 (VOID_FUNC fnReceiver, CVolObjectPointer* pEventReceiver, INT nTagNumber)
{
    rw_28.SetReceiver (fnReceiver, pEventReceiver, nTagNumber);
    _OnAfterEventAttached (fnReceiver != NULL);
}

INT CVolWinControl::rg_n7834 (INT rg_n7835, INT rg_n7836)
{
    INT nTagNumber;
    VOID_FUNC pfnReceiver;
    CVolObject* pobjEventReceiver;
    if (rw_28.GetReceiver (&pfnReceiver, &pobjEventReceiver, &nTagNumber))
        return ((INT (*) (CVolObject* pobjEventReceiver, CVolObject* pobjEventSource, INT nTagNumber, INT rg_n7835, INT rg_n7836))pfnReceiver) (pobjEventReceiver, this, nTagNumber, rg_n7835, rg_n7836);
    else
        return 0;
}

void CVolWinControl::ra_CVolWinControl_n7837 (VOID_FUNC fnReceiver, CVolObjectPointer* pEventReceiver, INT nTagNumber)
{
    rw_29.SetReceiver (fnReceiver, pEventReceiver, nTagNumber);
    _OnAfterEventAttached (fnReceiver != NULL);
}

INT CVolWinControl::rg_n7837 ()
{
    INT nTagNumber;
    VOID_FUNC pfnReceiver;
    CVolObject* pobjEventReceiver;
    if (rw_29.GetReceiver (&pfnReceiver, &pobjEventReceiver, &nTagNumber))
        return ((INT (*) (CVolObject* pobjEventReceiver, CVolObject* pobjEventSource, INT nTagNumber))pfnReceiver) (pobjEventReceiver, this, nTagNumber);
    else
        return 0;
}

void CVolWinControl::ra_CVolWinControl_n7838 (VOID_FUNC fnReceiver, CVolObjectPointer* pEventReceiver, INT nTagNumber)
{
    rw_30.SetReceiver (fnReceiver, pEventReceiver, nTagNumber);
    _OnAfterEventAttached (fnReceiver != NULL);
}

INT CVolWinControl::rg_n7838 ()
{
    INT nTagNumber;
    VOID_FUNC pfnReceiver;
    CVolObject* pobjEventReceiver;
    if (rw_30.GetReceiver (&pfnReceiver, &pobjEventReceiver, &nTagNumber))
        return ((INT (*) (CVolObject* pobjEventReceiver, CVolObject* pobjEventSource, INT nTagNumber))pfnReceiver) (pobjEventReceiver, this, nTagNumber);
    else
        return 0;
}

void CVolWinControl::ra_CVolWinControl_n7839 (VOID_FUNC fnReceiver, CVolObjectPointer* pEventReceiver, INT nTagNumber)
{
    rw_31.SetReceiver (fnReceiver, pEventReceiver, nTagNumber);
    _OnAfterEventAttached (fnReceiver != NULL);
}

INT CVolWinControl::rg_n7839 (TCHAR rg_n7840)
{
    INT nTagNumber;
    VOID_FUNC pfnReceiver;
    CVolObject* pobjEventReceiver;
    if (rw_31.GetReceiver (&pfnReceiver, &pobjEventReceiver, &nTagNumber))
        return ((INT (*) (CVolObject* pobjEventReceiver, CVolObject* pobjEventSource, INT nTagNumber, TCHAR rg_n7840))pfnReceiver) (pobjEventReceiver, this, nTagNumber, rg_n7840);
    else
        return 0;
}

void CVolWinControl::ra_CVolWinControl_n7841 (VOID_FUNC fnReceiver, CVolObjectPointer* pEventReceiver, INT nTagNumber)
{
    rw_32.SetReceiver (fnReceiver, pEventReceiver, nTagNumber);
    _OnAfterEventAttached (fnReceiver != NULL);
}

INT CVolWinControl::rg_n7841 (INT rg_n7842, INT rg_n7843, INT rg_n7844, INT rg_n7845, INT rg_n7846)
{
    INT nTagNumber;
    VOID_FUNC pfnReceiver;
    CVolObject* pobjEventReceiver;
    if (rw_32.GetReceiver (&pfnReceiver, &pobjEventReceiver, &nTagNumber))
        return ((INT (*) (CVolObject* pobjEventReceiver, CVolObject* pobjEventSource, INT nTagNumber, INT rg_n7842, INT rg_n7843, INT rg_n7844, INT rg_n7845, INT rg_n7846))pfnReceiver) (pobjEventReceiver, this, nTagNumber, rg_n7842, rg_n7843, rg_n7844, rg_n7845, rg_n7846);
    else
        return 0;
}

void CVolWinControl::rg_n7848 (CVolString& rg_n7849)
{
    CWnd* pWnd = GetMfcWndPtrWithValidHWnd ();
    if (pWnd != NULL)
    {
        pWnd->SetWindowText (rg_n7849);
        if (P_IS_VOL_INSTANCE_OF (this, rg_zjbjq) == FALSE)
            pWnd->Invalidate ();
    }
    else
        GetMfcWndObject ()->m_strAttrCaption = rg_n7849;
}

void CVolWinControl::rg_n7853 (BOOL rg_n7854)
{
    #ifndef _VOL_FOR_UI_DESIGNER
        CWnd* pWnd = GetMfcWndPtrWithValidHWnd ();
        if (pWnd != NULL)
        {
            pWnd->ShowWindow (rg_n7854 ? SW_SHOW : SW_HIDE);
            return;
        }
    #endif
    if (rg_n7854)
        GetMfcWndObject ()->m_dwAttrInitialStyle |= WS_VISIBLE;
    else
        GetMfcWndObject ()->m_dwAttrInitialStyle &= ~WS_VISIBLE;
}
void CVolWinControl::OnBeforeNativeWndCreate (CVolNativeWndCreateParam* pCreateParam)
{
    const CMfcWndObject* pMfcWndObject = GetMfcWndObject ();
    pCreateParam->m_szCaption = pMfcWndObject->m_strAttrCaption.GetText ();
    pCreateParam->m_dwStyle = pMfcWndObject->m_dwAttrInitialStyle;
    pCreateParam->m_dwExStyle = pMfcWndObject->m_dwAttrInitialExStyle;
    #ifdef _VOL_FOR_UI_DESIGNER
        pCreateParam->m_dwStyle |= WS_VISIBLE;
    #endif
    if (pCreateParam->m_pParentWnd != NULL && (pCreateParam->m_dwStyle & WS_POPUP) == 0)
        pCreateParam->m_dwStyle |= WS_CHILD;
    else
        pCreateParam->m_dwStyle &= ~WS_CHILD;
    const HFONT hFont = GetMfcWndObject ()->m_hFont;
    pCreateParam->m_hFont = (hFont == NULL ? (HFONT)::GetStockObject (DEFAULT_GUI_FONT) : hFont);
}
void CVolWinControl::OnAfterNativeWndCreate (CWnd* pWnd, const CVolNativeWndCreateParam* pCreateParam)
{
    if (pCreateParam->m_hFont != NULL)
        pWnd->SendMessage (WM_SETFONT, (WPARAM)pCreateParam->m_hFont, MAKELPARAM (TRUE, 0));
    if ((pCreateParam->m_dwStyle & WS_TABSTOP) == 0)
    {
        const DWORD dwCode = (DWORD)pWnd->SendMessage (WM_GETDLGCODE, 0, 0);
        if ((dwCode & (DLGC_WANTALLKEYS | DLGC_WANTARROWS | DLGC_WANTCHARS | DLGC_WANTMESSAGE | DLGC_WANTTAB)) != 0)
             pWnd->ModifyStyle (0, WS_TABSTOP, (SWP_NOSIZE | SWP_NOMOVE | SWP_NOZORDER | SWP_NOACTIVATE));
    }
    pCreateParam->CheckBorderStyle (pWnd);
}
BOOL CVolWinControl::PopupSubMenuClass (INT xPos, INT yPos, CVolRuntimeClass* pVolMenuRuntimeClass, BOOL_P blpIsTrayMenu, INT_P npSubMenuIndex)
{
    if (pVolMenuRuntimeClass == NULL)
        return FALSE;
    rg_cchl* pVolMenuObject = (rg_cchl*)pVolMenuRuntimeClass->CreateObject ();
    ASSERT (P_IS_VOL_INSTANCE_OF (pVolMenuObject, rg_cchl));
    CVolObjectDestroyer destroyer (pVolMenuObject);
    return pVolMenuObject->GetVolMenu ()->PopupSubMenu (xPos, yPos, blpIsTrayMenu, GetMfcWndHandle (), npSubMenuIndex);
}
BOOL CVolWinControl::OnProcessNativeWndMsg (MSG* pMsg)
{
    if (rg_n7841 ((INT_P)pMsg->hwnd, (INT)pMsg->message, (INT_P)pMsg->wParam, (INT_P)pMsg->lParam, (INT_P)pMsg) != 0)
        return TRUE;
    switch (pMsg->message)
    {
    case WM_LBUTTONDOWN:
    case WM_LBUTTONUP:
    case WM_LBUTTONDBLCLK:
    case WM_RBUTTONDOWN:
    case WM_RBUTTONUP:
    case WM_MOUSEMOVE:  {
        const INT xPos = (INT)LOWORD (pMsg->lParam);
        const INT yPos = (INT)HIWORD (pMsg->lParam);
        INT nKeyState = 0;
        if ((pMsg->wParam & MK_CONTROL) != 0)
            nKeyState |= KYS_CONTROL;
        if ((pMsg->wParam & MK_SHIFT) != 0)
            nKeyState |= KYS_SHIFT;
        if (GetKeyState (VK_MENU) < 0)
            nKeyState |= KYS_ALT;
        switch (pMsg->message)
        {
        case WM_LBUTTONDOWN:  if (rg_n7804 (xPos, yPos, nKeyState) != 0)  return TRUE;  break;
        case WM_LBUTTONUP:  if (rg_n7808 (xPos, yPos, nKeyState) != 0)  return TRUE;  break;
        case WM_LBUTTONDBLCLK:  if (rg_n7812 (xPos, yPos, nKeyState) != 0)  return TRUE;  break;
        case WM_RBUTTONDOWN:  if (rg_n7816 (xPos, yPos, nKeyState) != 0)  return TRUE;  break;
        case WM_RBUTTONUP:  if (rg_n7820 (xPos, yPos, nKeyState) != 0)  return TRUE;  break;
        case WM_MOUSEMOVE:  if (rg_n7824 (xPos, yPos, nKeyState) != 0)  return TRUE;  break;
        DEFAULT_FAIL
        }
        break;  }
    case WM_MOUSEWHEEL:  {
        INT nKeyState = 0;
        if ((pMsg->wParam & MK_CONTROL) != 0)
            nKeyState |= KYS_CONTROL;
        if ((pMsg->wParam & MK_SHIFT) != 0)
            nKeyState |= KYS_SHIFT;
        if (GetKeyState (VK_MENU) < 0)
            nKeyState |= KYS_ALT;
        if (rg_n7828 ((INT)(SHORT)HIWORD (pMsg->wParam) / WHEEL_DELTA, nKeyState) != 0)
            return TRUE;
        break;  }
    case WM_KEYDOWN:
    case WM_SYSKEYDOWN:  {
        const UINT_P upKeyCode = GetKeyCodeFromKeyMessageWParam (pMsg->wParam);
        if (rg_n7831 ((INT)(upKeyCode & ~(KYS_CONTROL | KYS_SHIFT | KYS_ALT)), (INT)(upKeyCode & (KYS_CONTROL | KYS_SHIFT | KYS_ALT))) != 0)
            return TRUE;
        break;  }
    case WM_KEYUP:
    case WM_SYSKEYUP:  {
        const UINT_P upKeyCode = GetKeyCodeFromKeyMessageWParam (pMsg->wParam);
        if (rg_n7834 ((INT)(upKeyCode & ~(KYS_CONTROL | KYS_SHIFT | KYS_ALT)), (INT)(upKeyCode & (KYS_CONTROL | KYS_SHIFT | KYS_ALT))) != 0)
            return TRUE;
        break;  }
    case WM_SETFOCUS:
        if (rg_n7837 () != 0)
            return TRUE;
        break;
    case WM_KILLFOCUS:
        if (rg_n7838 () != 0)
            return TRUE;
        break;
    case WM_CHAR:  {
        const INT_P npResult = rg_n7839 ((TCHAR)pMsg->wParam);
        if (npResult < 0)
            return TRUE;
        if (npResult > 0)
            pMsg->wParam = (WPARAM)npResult;
        break;  }
    case WM_SETCURSOR:
        if (GetMfcWndObject ()->m_hAttrCustomCursur != NULL)
        {
            ::SetCursor (GetMfcWndObject ()->m_hAttrCustomCursur);
            return TRUE;
        }
        break;
    }
    return FALSE;
}

CVolWinContainer::CVolWinContainer ()
{
}
void CVolWinContainer::OnBeforeNativeWndCreate (CVolNativeWndCreateParam* pCreateParam)
{
    BaseClass::OnBeforeNativeWndCreate (pCreateParam);
    pCreateParam->m_dwExStyle |= WS_EX_CONTROLPARENT;
}
void CVolWinContainer::OnCalcNativeWndPos (CVolNativeWndCreateParam* pCreateParam)
{
    BaseClass::OnCalcNativeWndPos (pCreateParam);
#ifndef _VOL_FOR_UI_DESIGNER
    if (pCreateParam->m_nWidth == INT_MIN || pCreateParam->m_nHeight == INT_MIN)
    {
        CMRect rt (0, 0, GetDesignClientWidth (), GetDesignClientHeight ());
#else
    {
        CMRect rt (0, 0, pCreateParam->m_nWidth, pCreateParam->m_nHeight);
#endif
        if (rt.right > 0 && rt.bottom > 0 &&
                AdjustWindowRectEx (&rt, pCreateParam->m_dwStyle,
                    (pCreateParam->m_pParentWnd == NULL && pCreateParam->m_pVolMenu != NULL && pCreateParam->m_pVolMenu->IsEmpty () == FALSE),
                    pCreateParam->m_dwExStyle))
        {
            pCreateParam->m_nWidth = rt.Width ();
            pCreateParam->m_nHeight = rt.Height ();
        }
        else
            pCreateParam->m_nWidth = pCreateParam->m_nHeight = 0;
    }
}

rg_cchl::rg_cchl ()
{
}
CRefVolMenu* rg_cchl::GetVolMenu ()
{
    if (m_pRefObject == NULL)
        TakeOverNewRefObject (new CRefVolMenu);
    ((CRefVolMenu*)m_pRefObject)->LoadFromDesignContent (VolGetDesignContent (), FALSE);
    return (CRefVolMenu*)m_pRefObject;
}

}
