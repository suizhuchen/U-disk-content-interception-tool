
// Generated by Volcano Development Platform - http://www.voldp.com

#include "stdafx.h"
#include "vol_user_app.h"

namespace rg_hsh_jymk
{

rg_j_jt::rg_j_jt ()
{
}
BOOL Monitorenumproc(HMONITOR Arg1, HDC Arg2, LPRECT Arg3, LPARAM Arg4)
{
int* p = (int*)Arg4;
*p = *p + 1;
return TRUE;
}
typedef struct _RTL_SYSTEM_TIMEOFDAY_INFORMATION
{
    LARGE_INTEGER BootTime;
    LARGE_INTEGER CurrentTime;
    LARGE_INTEGER TimeZoneBias;
    ULONG TimeZoneId;
    ULONG Reserved;
    ULONGLONG BootTimeBias;
    ULONGLONG SleepTimeBias;
} RTL_SYSTEM_TIMEOFDAY_INFORMATION, * PRTL_SYSTEM_TIMEOFDAY_INFORMATION;
IEnumWbemClassObject* GetpIEnumWbemClassObject(const wchar_t* NetworkResource, const wchar_t* Query)
{
    HRESULT hr;
    IWbemLocator* pIWbemLocator;
    IWbemServices* pIWbemServices;
    IEnumWbemClassObject* pIEnumWbemClassObject;
    hr = CoCreateInstance(CLSID_WbemLocator, NULL, CLSCTX_INPROC_SERVER, IID_IWbemLocator, (void**)&pIWbemLocator);
    if (hr == S_OK && pIWbemLocator)
    {
        hr = pIWbemLocator->ConnectServer((const BSTR)NetworkResource, NULL, NULL, 0, 0, 0, 0, &pIWbemServices);
        if (hr == S_OK && pIWbemServices)
        {
            hr = CoSetProxyBlanket(pIWbemServices, RPC_C_AUTHN_WINNT, RPC_C_AUTHZ_NONE, NULL, RPC_C_AUTHN_LEVEL_CALL, RPC_C_IMP_LEVEL_IMPERSONATE, NULL, EOAC_NONE);
            hr = pIWbemServices->ExecNotificationQuery((const BSTR)L"WQL", (const BSTR)Query, WBEM_FLAG_FORWARD_ONLY | WBEM_FLAG_RETURN_IMMEDIATELY, NULL, &pIEnumWbemClassObject);
            pIWbemServices->Release();
        }
        pIWbemLocator->Release();
    }
    return pIEnumWbemClassObject;
}
void ProcessNotifyEvent(LPVOID lpParameter)
{
    typedef int(WINAPI* ProcessNotifyEventPrc)(CVolString pszName, INT_P dwProcessID, CVolString pszCommandLine, CVolString pszExecutablePath);
    ProcessNotifyEventPrc pfnProcessNotifyEventPrc = (ProcessNotifyEventPrc)lpParameter;
    CoInitialize(NULL);
    HRESULT hr;
    IEnumWbemClassObject* pIEnumWbemClassObject;
    IWbemClassObject* pIWbemClassObject, * pTargetInstance;
    ULONG uReturned = 0;
    int iRet = 0;
    pIEnumWbemClassObject = GetpIEnumWbemClassObject(L"ROOT\\CIMV2", L"SELECT * FROM __InstanceCreationEvent WITHIN 1 WHERE TargetInstance ISA 'Win32_Process'");
    if (pIEnumWbemClassObject)
    {
        while (!iRet)
        {
            hr = pIEnumWbemClassObject->Next(WBEM_INFINITE, 1, &pIWbemClassObject, &uReturned);
            if (hr == S_OK && pIWbemClassObject)
            {
                VARIANT vtInstanceObject, vtName, vtProcessID, vtCommandLine, vtExecutablePath;
                hr = pIWbemClassObject->Get(L"TargetInstance", 0, &vtInstanceObject, NULL, NULL);
                pIWbemClassObject->Release();
                if (hr == S_OK && vtInstanceObject.vt == VT_UNKNOWN && vtInstanceObject.punkVal != NULL)
                {
                    pTargetInstance = (IWbemClassObject*)vtInstanceObject.punkVal;
                    hr = pTargetInstance->Get(L"Name", 0, &vtName, NULL, NULL);
                    hr = pTargetInstance->Get(L"ProcessID", 0, &vtProcessID, NULL, NULL);
                    hr = pTargetInstance->Get(L"CommandLine", 0, &vtCommandLine, NULL, NULL);
                    hr = pTargetInstance->Get(L"ExecutablePath", 0, &vtExecutablePath, NULL, NULL);
                    iRet = pfnProcessNotifyEventPrc((CVolString)vtName.bstrVal, (int)vtProcessID.lVal, (CVolString)vtCommandLine.bstrVal, (CVolString)vtExecutablePath.bstrVal);
                    pTargetInstance->Release();
                }
            }
        }
        pIEnumWbemClassObject->Release();
    }
    CoUninitialize();
}
typedef struct _REPARSE_DATA_BUFFER
{
    ULONG  ReparseTag;
    USHORT ReparseDataLength;
    USHORT Reserved;
    union
    {
        struct
        {
            USHORT SubstituteNameOffset;
            USHORT SubstituteNameLength;
            USHORT PrintNameOffset;
            USHORT PrintNameLength;
            ULONG Flags;
            WCHAR PathBuffer[1];
        } SymbolicLinkReparseBuffer;
        struct
        {
            USHORT SubstituteNameOffset;
            USHORT SubstituteNameLength;
            USHORT PrintNameOffset;
            USHORT PrintNameLength;
            WCHAR PathBuffer[1];
        } MountPointReparseBuffer;
        struct
        {
            UCHAR  DataBuffer[1];
        } GenericReparseBuffer;
    } DUMMYUNIONNAME;
} REPARSE_DATA_BUFFER, * PREPARSE_DATA_BUFFER;

INT CALLBACK rg_j_jt::rg_n9608 (rg_hsh_jb::rg_wbshzl& rg_n9609)
{
    CVolString rg_n9610;
    if (DWORD dwDriveStrings = GetLogicalDriveStringsW(0, NULL))
    {
        wchar_t* szDriveStrings = new wchar_t[dwDriveStrings]();
        GetLogicalDriveStringsW(dwDriveStrings, szDriveStrings);
        DWORD i = 0;
        while (szDriveStrings[i] != '\0')
        {
            rg_n9610.SetValueText(szDriveStrings + i);
    rg_n9609.data ().Add2 (rg_n9610.Left (1).GetText ());
            i += wcslen(szDriveStrings) + 1;
        }
        delete[] szDriveStrings;
    }
    return ((INT)rg_n9609.data ().GetCount ());
}

}
