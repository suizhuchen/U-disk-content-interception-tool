
// Generated by Volcano Development Platform - http://www.voldp.com

#include "stdafx.h"
#include "vol_user_app.h"

namespace rg_hsh_jb
{

rg_kzhdxl::rg_kzhdxl ()
{
}

void rg_kzhdxl::GetDumpString (CVolString& rg_n2120, INT rg_n2121)
{
    BaseClass::GetDumpString (rg_n2120, rg_n2121);
}

rg_kshjl::rg_kshjl ()
{
}

CVolString rg_kshjl::VolGetDesignContent ()
{
    return (_T (""));
}

rg_zjl::rg_zjl ()
{
    rg_n2263 = 0;
}

BOOL rg_zjl::_IsSelfEqual (const rg_zjl& objCompare) const
{
    if (rg_n2263 != objCompare.rg_n2263)  return FALSE;
    return TRUE;
}

void rg_zjl::_CopySelfFrom (const rg_zjl& objCopyFrom)
{
    rg_n2263 = objCopyFrom.rg_n2263;
}

rg_dzhshl::rg_dzhshl ()
{
    rg_n2264 = 0;
}

BOOL rg_dzhshl::_IsSelfEqual (const rg_dzhshl& objCompare) const
{
    if (rg_n2264 != objCompare.rg_n2264)  return FALSE;
    return TRUE;
}

void rg_dzhshl::_CopySelfFrom (const rg_dzhshl& objCopyFrom)
{
    rg_n2264 = objCopyFrom.rg_n2264;
}

rg_zfl::rg_zfl ()
{
    rg_n2265 = 0;
}

BOOL rg_zfl::_IsSelfEqual (const rg_zfl& objCompare) const
{
    if (rg_n2265 != objCompare.rg_n2265)  return FALSE;
    return TRUE;
}

void rg_zfl::_CopySelfFrom (const rg_zfl& objCopyFrom)
{
    rg_n2265 = objCopyFrom.rg_n2265;
}

rg_zhshl::rg_zhshl ()
{
    rg_n2266 = 0;
}

BOOL rg_zhshl::_IsSelfEqual (const rg_zhshl& objCompare) const
{
    if (rg_n2266 != objCompare.rg_n2266)  return FALSE;
    return TRUE;
}

void rg_zhshl::_CopySelfFrom (const rg_zhshl& objCopyFrom)
{
    rg_n2266 = objCopyFrom.rg_n2266;
}

rg_bzhshl::rg_bzhshl ()
{
    rg_n2267 = 0;
}

BOOL rg_bzhshl::_IsSelfEqual (const rg_bzhshl& objCompare) const
{
    if (rg_n2267 != objCompare.rg_n2267)  return FALSE;
    return TRUE;
}

void rg_bzhshl::_CopySelfFrom (const rg_bzhshl& objCopyFrom)
{
    rg_n2267 = objCopyFrom.rg_n2267;
}

rg_chzhshl::rg_chzhshl ()
{
    rg_n2268 = 0;
}

BOOL rg_chzhshl::_IsSelfEqual (const rg_chzhshl& objCompare) const
{
    if (rg_n2268 != objCompare.rg_n2268)  return FALSE;
    return TRUE;
}

void rg_chzhshl::_CopySelfFrom (const rg_chzhshl& objCopyFrom)
{
    rg_n2268 = objCopyFrom.rg_n2268;
}

rg_xshl::rg_xshl ()
{
    rg_n2269 = 0;
}

BOOL rg_xshl::_IsSelfEqual (const rg_xshl& objCompare) const
{
    if (IsDoubleEqual (rg_n2269, objCompare.rg_n2269) == FALSE)  return FALSE;
    return TRUE;
}

void rg_xshl::_CopySelfFrom (const rg_xshl& objCopyFrom)
{
    rg_n2269 = objCopyFrom.rg_n2269;
}

rg_ljxl::rg_ljxl ()
{
    rg_n2270 = FALSE;
}

BOOL rg_ljxl::_IsSelfEqual (const rg_ljxl& objCompare) const
{
    if (rg_n2270 != objCompare.rg_n2270)  return FALSE;
    return TRUE;
}

void rg_ljxl::_CopySelfFrom (const rg_ljxl& objCopyFrom)
{
    rg_n2270 = objCopyFrom.rg_n2270;
}

rg_ckdxl::rg_ckdxl ()
{
    _OnInitExtra ();
}

BOOL rg_ckdxl::_IsSelfEqual (const rg_ckdxl& objCompare) const
{
    if (_IsSelfEqualExtra (objCompare) == FALSE)
        return FALSE;
    return TRUE;
}

void rg_ckdxl::_CopySelfFrom (const rg_ckdxl& objCopyFrom)
{
    _CopySelfFromExtra (objCopyFrom);
}

rg_ckdxl::~rg_ckdxl ()
{
    _OnCleanupExtra ();
}
void rg_ckdxl::SetRefObject (CRefObject* pRefObject)
{
    ASSERT_R_DATA_OR_NULL (pRefObject);
    if (pRefObject != NULL)  pRefObject->AddRef ();
    if (m_pRefObject != NULL)  m_pRefObject->Release ();
    m_pRefObject = pRefObject;
}
void rg_ckdxl::TakeOverNewRefObject (CRefObject* pNewRefObject)
{
    ASSERT (pNewRefObject != m_pRefObject);
    ASSERT_R_DATA_OR_NULL (pNewRefObject);
    if (m_pRefObject != NULL)  m_pRefObject->Release ();
    m_pRefObject = pNewRefObject;
}

}
